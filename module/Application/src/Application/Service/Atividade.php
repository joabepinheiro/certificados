<?php
namespace Application\Service;

use Base\Service\AbstractService;
use Doctrine\ORM\EntityManager;
use Zend\Filter\StringTrim;

class Atividade extends AbstractService
{

    private $atividades_do_evento_ja_cadastradas = null;

    private $filterStringTrim = null;

    public function __construct(EntityManager $em)
    {
        parent::__construct($em);
        
        $this->entity = 'Application\Entity\Atividade';
        $this->errorCodeValidator = [
            1451 => 'Para excluir essa atividade você deverá excluir todas as participações a ela vinculada'
        ];
        
        $this->filterStringTrim = new StringTrim();
    }

    public function insert($data)
    {
        if (! is_object($data['evento'])) {
            $data['evento'] = $this->em->getRepository('Application\Entity\Evento')->find($data['evento']);
        }
        
        if (! is_object($data['tipo_atividade'])) {
            $data['tipo_atividade'] = $this->em->getRepository('Application\Entity\TipoAtividade')->find($data['tipo_atividade']);
        }
        
        $data['data_inicio'] = substr($data['data_inicio'], 6, 4) . '-' . substr($data['data_inicio'], 3, 2) . '-' . substr($data['data_inicio'], 0, 2);
        
        $data['data_fim'] = substr($data['data_fim'], 6, 4) . '-' . substr($data['data_fim'], 3, 2) . '-' . substr($data['data_fim'], 0, 2);
        
        $datetime = new \DateTime($data['data_inicio']);
        $data['data_inicio'] = $datetime;
        
        $datetime = new \DateTime($data['data_fim']);
        $data['data_fim'] = $datetime;
        
        return parent::insert($data); // TODO: Change the autogenerated stub
    }

    public function update($data)
    {
        if (! is_object($data['evento'])) {
            $data['evento'] = $this->em->getRepository('Application\Entity\Evento')->find($data['evento']);
        }
        
        if (! is_object($data['tipo_atividade'])) {
            $data['tipo_atividade'] = $this->em->getRepository('Application\Entity\TipoAtividade')->find($data['tipo_atividade']);
        }
        
        $data['data_inicio'] = substr($data['data_inicio'], 6, 4) . '-' . substr($data['data_inicio'], 3, 2) . '-' . substr($data['data_inicio'], 0, 2);
        $data['data_fim'] = substr($data['data_fim'], 6, 4) . '-' . substr($data['data_fim'], 3, 2) . '-' . substr($data['data_fim'], 0, 2);
        
        $datetime = new \DateTime($data['data_inicio']);
        $data['data_inicio'] = $datetime;
        
        $datetime = new \DateTime($data['data_fim']);
        $data['data_fim'] = $datetime;
        
        return parent::update($data); // TODO: Change the autogenerated stub
    }

    public function cadastrarPorPlanilha($data)
    {
        $data['count_atividades_inseridas'] = 0;
        
        $evento = $this->em->getRepository('Application\Entity\Evento')->findOneBy(array(
            'id' => $data['evento']
        ));
        
        $this->atividades_do_evento_ja_cadastradas = $this->em->getRepository($this->entity)->getTituloAtividadesDoEvento(array(
            'evento' => $evento
        ));
        
        $objPHPExcel = \PhpOffice\PhpSpreadsheet\IOFactory::load($data['planilha']['tmp_name']);
        /** @var  $worksheet \PhpOffice\PhpSpreadsheet\Worksheet */
        $worksheet = $objPHPExcel->getAllSheets()[0];
        
        $rows = $worksheet->toArray();
        
        $index = array();
        
        // pegar indices associados as colunas cpf, data nascimetno e nome completo
        $x = 0;
        while ($row = current($rows)) {
            
            if (in_array('Nome da atividade', $row) && in_array('Carga horária', $row) && in_array('Data início', $row) && in_array('Data fim', $row) && in_array('Tipo', $row)) {
                $index['row'] = $x + 1;
                $index['columns']['nome_da_atividade'] = array_search('Nome da atividade', $row, false);
                $index['columns']['carga_horaria'] = array_search('Carga horária', $row, false);
                $index['columns']['tipo'] = array_search('Tipo', $row, false);
                $index['columns']['data_inicio'] = array_search('Data início', $row, false);
                $index['columns']['data_fim'] = array_search('Data fim', $row, false);
            }
            $x ++;
            next($rows);
        }
        
        // Se não encontrou uma das colunas obrigatórias cancela o envio e informa ooccorido
        for ($x = $index['row']; $x < count($rows); $x ++) {
            $linha = $rows[$x];
            $columns = $index['columns'];
            
            $nome_da_atividade = $this->filterStringTrim->filter($linha[$columns['nome_da_atividade']]);
            $carga_horaria = $this->filterStringTrim->filter($linha[$columns['carga_horaria']]);
            $data_inicio = $this->filterStringTrim->filter($linha[$columns['data_inicio']]);
            $data_inicio = date('d/m/Y', strtotime($data_inicio));
            $data_fim = $this->filterStringTrim->filter($linha[$columns['data_fim']]);
            $data_fim = date('d/m/Y', strtotime($data_fim));
            $tipo = $this->filterStringTrim->filter($linha[$columns['tipo']]);
            $tipo = $this->getTipoAtividade($tipo)->getId();
            
            try {
                if (! $this->atividadeJaCadastrada($nome_da_atividade)) {
                    $result = $this->insert(array(
                        'titulo' => $nome_da_atividade,
                        'carga_horaria' => $carga_horaria,
                        'tipo_atividade' => $tipo,
                        'data_inicio' => $data_inicio,
                        'data_fim' => $data_fim,
                        'evento' => $evento
                    ));
                    
                    if ($result) {
                        $data['count_atividades_inseridas'] ++;
                    }
                }
            } catch (\Doctrine\DBAL\Exception\DriverException $exception) {
                return $this->exceptionMenssage($exception->getErrorCode(), $exception->getMessage());
            } catch (\Exception $exception) {
                return $this->exceptionMenssage($exception->getCode(), $exception->getMessage());
            }
        }
        
        return $data;
    }

    public function atividadeJaCadastrada($nome_da_atividade)
    {
        foreach ($this->atividades_do_evento_ja_cadastradas as $atividade) {
            if ($atividade['titulo'] == $nome_da_atividade) {
                return true;
            }
        }
        return false;
    }

    /**
     *
     * @param
     *            $nome_tipo_atividade
     * @return \Application\Entity\TipoAtividade
     */
    public function getTipoAtividade($nome_tipo_atividade)
    {
        
        /**
         *
         * @var $tipo_atividade \Application\Entity\TipoAtividade
         */
        $tipo_atividade = $this->em->getRepository('Application\Entity\TipoAtividade')->findOneBy(array(
            'nome' => $nome_tipo_atividade
        ));
        
        if (is_null($tipo_atividade)) {
            $tipo_atividade = (new TipoAtividade($this->em))->insert(array(
                'nome' => $nome_tipo_atividade
            ));
        }
        
        return $tipo_atividade;
    }
}

