<?php
namespace Application\Service;

use Base\Service\AbstractService;
use Doctrine\ORM\EntityManager;

class ConfigurarModeloCertificado extends AbstractService
{

    private $path_folder_modelo_certificado_frente;

    public function __construct(EntityManager $em)
    {
        parent::__construct($em);
        
        $this->entity = 'Application\Entity\CertificadoTipoFuncaoEvento';
        $this->errorCodeValidator = [
            1451 => 'Para excluir esse evento você deverá excluir todas as participações e atividades a ele vinculado'
        ];
        $this->path_folder_modelo_certificado_frente = realpath(dirname(__FILE__). '/../../../../../public_html/assets/certificados/frente/'). DIRECTORY_SEPARATOR;
    }

    public function insert($data)
    {


        $data['evento'] = $this->em->getRepository('Application\Entity\Evento')->find($data['evento']);
        $data['modelo'] = $this->em->getRepository('Application\Entity\Modelo')->find($data['modelo']);
        /** @var  $entity \Application\Entity\ModeloCertificado*/
        $entity = parent::insert($data); // TODO: Change the autogenerated stub

        $data['bgFrente'] = $entity->getId().'.'. pathinfo($data['modelo_certificado_frente']['name'], PATHINFO_EXTENSION);
        $data['id']  = $entity->getId();

        $entity = parent::update($data);

        if(isset($data['tiposAtividade'])){
            for($x=0; $x < count($data['tiposAtividade']); $x++) {
                $this->em->getConnection()->insert('certificado_tipo_funcao', array(
                    'modelo_certificado_id' => $entity->getId(),
                    'tipo_atividade_id'     => $data['tiposAtividade'][$x],
                    'funcao_id'             => $data['funcoes'][$x]
                ));
            }
        }

        $filter = new \Zend\Filter\File\Rename(array(
            "target" => $this->path_folder_modelo_certificado_frente . $data['bgFrente'],
            "overwrite" => true
        ));
        
        $filter->filter($data['modelo_certificado_frente']);
        
        return $entity;
    }

    public function update($data)
    {

        $data['evento'] = $this->em->getRepository('Application\Entity\Evento')->find($data['evento']);
        $entity = parent::update($data); // TODO: Change the autogenerated stub

        //deleta todos os critérios anes de atualiza-los
        $this->em->getConnection()->delete('certificado_tipo_funcao', array(
            'modelo_certificado_id' => $entity->getId()
        ));

        if(isset($data['tiposAtividade'])){
            for($x=0; $x < count($data['tiposAtividade']); $x++) {
                $this->em->getConnection()->insert('certificado_tipo_funcao', array(
                    'modelo_certificado_id' => $entity->getId(),
                    'tipo_atividade_id'     => $data['tiposAtividade'][$x],
                    'funcao_id'             => $data['funcoes'][$x]
                ));
            }
        }

        
        //atualiza o arquivo se um novo arquivo foi enviado
        if (empty($data['modelo_certificado_frente']['size']) != 0) {
            $filter = new \Zend\Filter\File\Rename(array(
                "target" => $this->path_folder_modelo_certificado_frente . $entity->getId() . ".png",
                "overwrite" => true
            ));
            
            $filter->filter($data['modelo_certificado_frente']);
        }
        
        return $entity;
    }

    public function delete($id)
    {
        /** @var  $entity \Application\Entity\ModeloCertificado */
        $entity = $this->em->getRepository($this->entity)->find($id);
        $path_file = $this->path_folder_modelo_certificado_frente . $entity->getBgFrente();

        if(file_exists($path_file)){
            unlink($path_file);
        }

        return parent::delete(array(
            'id' => $id
        ));
    }

}

