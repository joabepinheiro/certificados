<?php
namespace Application\Service;

use Application\Form\Validator\CpfValidator;
use Application\View\Helper\CPF;
use Base\Service\AbstractService;
use Doctrine\ORM\EntityManager;
use Zend\Filter\Digits;
use Zend\Filter\StringTrim;

class Participante extends AbstractService
{

    public function __construct(EntityManager $em)
    {
        parent::__construct($em);
        
        $this->entity = 'Application\Entity\Participante';
        $this->errorCodeValidator = [
            1062 => 'O CPF  informado  já foi utilizado em outro cadastro',
        ];
    }

    public function insert($data)
    {
        $data_nascimento = $data['data_nascimento'];
        
        $ano = substr($data_nascimento, 6, 4);
        $mes = substr($data_nascimento, 3, 2);
        $dia = substr($data_nascimento, 0, 2);
        
        $datetime = new \DateTime();
        $datetime->setDate($ano, $mes, $dia);
        
        $data['data_nascimento'] = $datetime;
        
        return parent::insert($data); // TODO: Change the autogenerated stub
    }

    /**
     * Adiciona os participantes por planilha
     *
     * @param unknown $data
     * @return array[]|string[]|number[]
     */
    public function cadastrarPorPlanilha($data)
    {

        $menssagens_erros = array();
        $total_participantes_inseridos = 0;
        
        $objPHPExcel = \PhpOffice\PhpSpreadsheet\IOFactory::load($data['planilha']['tmp_name']);
        /** @var  $worksheet \PhpOffice\PhpSpreadsheet\Worksheet */
        $worksheet = $objPHPExcel->getAllSheets()[0];
        
        $rows = $worksheet->toArray();
        
        // pegar indices associados as colunas cpf, data nascimetno e nome completo
        $index = $this->getPosicoesDasColunasDaPlanilha($rows);
        
        // inseri linha a linha os participantes com dados válidos
        for ($x = $index['row']; $x < count($rows); $x ++) {
            $erro = false; // Se tiver algun erro seta true nessa variavel
            $linha = $rows[$x]; // linha atual a ser inserida
            $columns = $index['columns']; // indices
                                          
            // Filtra os ponts e traço do cpf, deixa somente os números
            if (empty($linha[$columns['cpf']]) && empty($linha[$columns['data_nascimento']]) && empty($linha[$columns['nome_completo']])) {
                continue;
            }
            
            $cpf = (new Digits())->filter($linha[$columns['cpf']]);
            
            $validator_date = new \Zend\Validator\Date();
            $validator_date->setFormat('m/d/Y');
            
            if (empty($linha[$columns['data_nascimento']])) {
                $data_nascimento = '2017-12-23';
            } elseif (! $validator_date->isValid($linha[$columns['data_nascimento']])) {
                $erro = true;
                $menssagens_erros[$x][] = 'Data inválida';
            } else {
                $data_nascimento = date('Y-m-d', strtotime($linha[$columns['data_nascimento']]));
            }
            
            $nome_completo = (new StringTrim())->filter($linha[$columns['nome_completo']]);
            
            if ($columns['email'] != false) {
                $email = (new StringTrim())->filter($linha[$columns['email']]);
            } else {
                $email = null;
            }


            if ($linha[$columns['instituicao']] == 'Sim' || $linha[$columns['instituicao']] == 'Não' ) {
                $instituicao = (new StringTrim())->filter($linha[$columns['instituicao']]);
            } else {
                $instituicao = 'Sim';
            }
            
            if (empty($cpf)) {
                $erro = true;
                $menssagens_erros[$x][] = 'CPF vazio';
            } elseif (! (new CpfValidator())->isValid($cpf)) {
                $erro = true;
                $menssagens_erros[$x][] = 'CPF inválido';
            }
            
            if (empty($nome_completo)) {
                $erro = true;
                $menssagens_erros[$x][] = 'Nome do participante vazio';
            }


            try {
                if (! $erro) {
                    $this->em->getConnection()->insert('participante', array(
                        'cpf'               => $cpf,
                        'nome_completo'     => strtoupper($nome_completo),
                        'data_nascimento'   => $data_nascimento,
                        'email'             => strtolower($email),
                        'instituicao_ifba_vca'       => $instituicao
                    ));
                    
                    $total_participantes_inseridos ++;
                }
            } catch (\Doctrine\DBAL\Exception\DriverException $exception) {
                if ($exception->getErrorCode() == 1062) {
                    $erro = true;
                    $menssagens_erros[$x][] = 'O cpf ' .  substr($cpf, 0, 3) . '.' . substr($cpf, 3, 3) . '.' . substr($cpf, 6, 3) . '-' . substr($cpf, 9, 2) .' ( '.$nome_completo.  ') já foi cadastrado anteriormente';
                } else {

                    $this->exceptionMenssage($exception->getErrorCode(), $exception->getMessage());

                    $menssagens_erros[$x][] = $exception->getMessage();
                }
            } catch (\Exception $exception) {
                $this->exceptionMenssage($exception->getCode(), $exception->getMessage());
                $menssagens_erros[$x][] = $exception->getMessage();
            }
        }
        
        return array(
            'menssagens_erros' => $menssagens_erros,
            'total_participantes_inseridos' => $total_participantes_inseridos
        );
    }

    public function update($data)
    {
        $data_nascimento = $data['data_nascimento'];
        
        $ano = substr($data_nascimento, 6, 4);
        $mes = substr($data_nascimento, 3, 2);
        $dia = substr($data_nascimento, 0, 2);
        
        $datetime = new \DateTime();
        $datetime->setDate($ano, $mes, $dia);
        
        $data['data_nascimento'] = $datetime;
        
        return parent::update($data); // TODO: Change the autogenerated stub
    }

    /**
     * Atualiza a data de nascimento do participante desdeque ela seja diferente de 23/12/2017
     *
     * @param $cpf
     * @param $data_nascimento
     * @return \Application\Entity\Participante|null
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function atualizarDataDeNascimento($cpf, $data_nascimento)
    {
        /** @var  $participante \Application\Entity\Participante */
        $participante = $this->em->getRepository('Application\Entity\Participante')->findOneBy(array(
            'cpf' => $cpf
        ));

        if($participante->getDataNascimento()->format('d/m/Y') != '23/12/2017'){
            return $participante;
        }

        $ano = substr($data_nascimento, 6, 4);
        $mes = substr($data_nascimento, 3, 2);
        $dia = substr($data_nascimento, 0, 2);
        
        $data_nascimento_formatada = new \DateTime($ano . '-' . $mes . '-' . $dia);
        
        $participante->setDataNascimento($data_nascimento_formatada);
        
        $this->em->flush($participante);
        
        try {
            $this->em->flush();
        } catch (\Doctrine\DBAL\Exception\DriverException $exception) {
            return $this->exceptionMenssage($exception->getErrorCode(), $exception->getMessage());
        } catch (\Exception $exception) {
            return $this->exceptionMenssage($exception->getCode(), $exception->getMessage());
        }
        
        return $participante;
    }

    /**
     * Pegar indices associados as colunas cpf, data nascimetno e nome completo
     * 
     * @param unknown $rows
     * @return number[]|mixed
     */
    public function getPosicoesDasColunasDaPlanilha($rows)
    {
        $index = array(
            'columns' => array(
                'nome_completo' => false,
                'email' => false,
                'cpf' => false,
                'data_nascimento' => false,
                'instituicao' => false
            )
        );
        $x = 0;
        
        while ($row = current($rows)) {
            
            if (in_array('CPF', $row) && in_array('Nome completo', $row) && in_array('Data de nascimento', $row)) {
                $index['row'] = $x + 1;
                
                // buscar índice do campo cpf
                foreach (array(
                    'Data de nascimento',
                    'data de nascimento',
                    'DATA DE NASCIMENTO',
                    'NASCIMENTO'
                ) as $value) {
                    if ($index['columns']['data_nascimento'] === false) {
                        $index['columns']['data_nascimento'] = array_search($value, $row, false);
                    }
                }
                
                // buscar índice do campo cpf
                foreach (array(
                    'CPF',
                    'cpf',
                    'Cpf'
                ) as $value) {
                    
                    if ($index['columns']['cpf'] === false) {
                        $index['columns']['cpf'] = array_search($value, $row, false);
                    }
                }
                
                // buscar índice do campo Nome completo
                foreach (array(
                    'Nome completo',
                    'nome completo',
                    'Nome Completo',
                    'NOME COMPLETO'
                ) as $value) {
                    if ($index['columns']['nome_completo'] === false) {
                        $index['columns']['nome_completo'] = array_search($value, $row, false);
                    }
                }
                
                // buscar índice do campo email
                foreach (array(
                    'Email',
                    'email',
                    'e-mail',
                    'EMAIL',
                    'E-MAIL'
                ) as $value) {
                    if ($index['columns']['email'] === false) {
                        $index['columns']['email'] = array_search($value, $row, false);
                    }
                }
                
                // buscar índice do campo Instituição
                foreach (array(
                    'É Estudante do IFBA/Vitória da Conquista',
                    'É Estudante do IFBA/Vitória da Conquista',
                    'É Estudante do IFBA/Vitória da Conquista',
                    'É Estudante do IFBA/Vitória da Conquista'
                ) as $value) {
                    if ($index['columns']['instituicao'] === false) {
                        $index['columns']['instituicao'] = array_search($value, $row, false);
                    }
                }
            }
            $x ++;
            next($rows);
        }
        
        return $index;
    }
}

